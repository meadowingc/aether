"""
Django settings for aether project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

if not (BASE_DIR / ".env").exists():
    from django.core.management.utils import get_random_secret_key
    # Quote the secret to avoid shell parse errors if the file is sourced by tools
    secret = get_random_secret_key().replace("'", "\\'")
    (BASE_DIR / ".env").write_text("\n".join([
        f"DJANGO_SECRET_KEY='{secret}'",
        "DJANGO_PROD=False",
    ]))

dotenv.load_dotenv(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY") or "django-insecure-please-set-DJANGO_SECRET_KEY-in-.env"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_PROD", "False") == "False"

ALLOWED_HOSTS = ["aether.meadow.cafe", "127.0.0.1"]

# When behind a reverse proxy/HTTPS terminator (e.g., Caddy), ensure CSRF works
# and that Django recognizes the original client scheme.
CSRF_TRUSTED_ORIGINS = ["https://aether.meadow.cafe"]
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")


# Application definition

INSTALLED_APPS = [
    "aether_notes.apps.AetherNotesConfig",
    "accounts",  # user profiles + social connections
    "django.contrib.admin",
    "django.contrib.auth",
    # Two-factor auth (TOTP via Google Authenticator)
    "django_otp",
    "django_otp.plugins.otp_static",
    "django_otp.plugins.otp_totp",
    "two_factor",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # Ensure authenticated users have an OTP device verified in the request
    "django_otp.middleware.OTPMiddleware",
    "accounts.middleware.RateLimitAuthMiddleware",  # limit login attempts
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "aether.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "aether.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Simple local cache (can be replaced with Redis/Memcached in production)
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "aether-local",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Costa_Rica"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Always use an absolute URL path for static files so the proxy can serve them.
STATIC_URL = "/static/"

# Where 'collectstatic' will place compiled/static assets for production serving
# by a web server (e.g., Caddy). Ensure this directory exists or let Django create it.
STATIC_ROOT = BASE_DIR / "staticfiles"

# User-uploaded media (if used). Configure your proxy to serve this too.
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Authentication URLs (two-factor URLs included at root without namespace)
# Using un-namespaced 'login' because we included the two_factor urlpatterns directly (no namespace arg)
LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "index"

# Simple auth rate limits (per IP)
AUTH_LOGIN_RATE_LIMIT = {"limit": 5, "window": 60}       # 5 login POSTs / 60s / IP
AUTH_CREATE_NOTE_LIMIT = {"limit": 2, "window": 60}      # already enforced via decorator
AUTH_REGISTER_RATE_LIMIT = {"limit": 5, "window": 60}    # decorator on register view

SESSION_COOKIE_DOMAIN = "aether.meadow.cafe"

ADMIN_ENABLED = os.getenv("DJANGO_ADMIN_ENABLED", "True") == "True"
